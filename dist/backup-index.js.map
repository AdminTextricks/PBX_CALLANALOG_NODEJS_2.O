{"version":3,"file":"backup-index.js","names":["require","config","express","cors","bodyParser","session","sharedsession","connection","app","crypto","MySQLStore","PORT","use","json","origin","process","env","CORS_FRONTEND_URL","credentials","sessionStore","sessionMiddleware","key","secret","SESSION_SECRET_KEY","resave","saveUninitialized","store","cookie","maxAge","secure","get","_","res","send","server","listen","console","log","io","autoSave","socket","next","request","generateHash","data","cleanedData","map","item","updated_at","rest","createHash","update","JSON","stringify","digest","getLiveCalls","company_id","Promise","resolve","reject","query","err","results","getWaitingCalls","getAllWaitingCalls","getAllLiveCalls","on","prevData","slug","previousCompanyLiveCallsHash","previousCompanyWaitingCallsHash","previousWaitingCallsHash","previousLiveCallsHash","getVerifyDoc","id","statusMessage","length","status_message","pollStatus","userdata","previousStatus","result","currentStatus","emit","userId","setTimeout","error","getDocumentsCount","currentCount","count","getBalanceByCompany","currentBalalnce","balance","handshake","save","is_verified_doc","params","fetchAllDocs","setInterval","includes","clearInterval","liveCalls","fetchLiveCallsInterval","currentHash","waitingCalls","fetchWaitingCallsInterval","fetchAllWaitingCallsInterval","currentWaitingCalls","allLiveCalls","fetchAllLiveCallsInterval","currentLiveCalls","req"],"sources":["../src/backup-index.js"],"sourcesContent":["require(\"dotenv\").config();\r\nconst express = require(\"express\");\r\nconst cors = require(\"cors\");\r\nconst bodyParser = require(\"body-parser\");\r\nconst session = require(\"express-session\");\r\nconst sharedsession = require(\"express-socket.io-session\");\r\nconst connection = require(\"./db\");\r\nconst app = express();\r\nconst crypto = require(\"crypto\");\r\nconst MySQLStore = require(\"express-mysql-session\")(session);\r\nconst PORT = 8001;\r\n\r\n// Middleware\r\napp.use(bodyParser.json());\r\n//app.use(cors({ origin: \"*\" }));\r\napp.use(\r\n  cors({\r\n    origin: process.env.CORS_FRONTEND_URL,\r\n    credentials: true,\r\n  })\r\n);\r\nconst sessionStore = new MySQLStore(connection);\r\nconst sessionMiddleware = session({\r\n  key: \"cookie_id\",\r\n  secret: process.env.SESSION_SECRET_KEY,\r\n  resave: false, // Set to false to avoid unnecessary session resaving\r\n  saveUninitialized: false, // Set to false to avoid saving uninitialized sessions\r\n  store: sessionStore,\r\n  cookie: { maxAge: 8 * 60 * 60 * 1000 }, // 8 hours in milliseconds\r\n  secure: true,\r\n});\r\napp.use(sessionMiddleware);\r\napp.use(express.json());\r\n// Routes\r\napp.get(\"/\", (_, res) => {\r\n  res.send(\"Server running...\");\r\n});\r\n\r\nconst server = app.listen(PORT, console.log(\"Server is Running...\", PORT));\r\nconst io = require(\"socket.io\")(server, {\r\n  cors: { origin: \"*\" },\r\n});\r\n\r\nio.use(\r\n  sharedsession(sessionMiddleware, {\r\n    autoSave: true, // Ensure session is saved automatically\r\n  })\r\n);\r\n\r\nio.use((socket, next) => {\r\n  sessionMiddleware(socket.request, {}, next);\r\n  next();\r\n});\r\n\r\nconst generateHash = (data) => {\r\n  const cleanedData = data.map((item) => {\r\n    const { updated_at, ...rest } = item; // Exclude updated_at\r\n    return rest;\r\n  });\r\n\r\n  return crypto\r\n    .createHash(\"md5\")\r\n    .update(JSON.stringify(cleanedData))\r\n    .digest(\"hex\");\r\n};\r\n\r\nconst getLiveCalls = ({ company_id }) => {\r\n  return new Promise((resolve, reject) => {\r\n    const query = `\r\n      SELECT companies.company_name, companies.email, companies.id as company_id , countries.country_name, caller_num,agent_channel,agent_name,agent_number, call_status, call_type, tfn, destination_type, destination, live_calls.created_at, live_calls.updated_at FROM live_calls\r\n      left join companies on live_calls.company_id = companies.id\r\n      left join countries on live_calls.country_id = countries.id\r\n      where live_calls.call_status=3 and live_calls.company_id= ${company_id}\r\n    `;\r\n    connection.query(query, (err, results) => {\r\n      if (err) {\r\n        return reject(err);\r\n      }\r\n      resolve(results);\r\n    });\r\n  });\r\n};\r\n\r\nconst getWaitingCalls = ({ company_id }) => {\r\n  return new Promise((resolve, reject) => {\r\n    const query = `\r\n      SELECT companies.company_name, companies.email, countries.country_name, caller_num,agent_channel,agent_name,agent_number, call_status, call_type, tfn, destination_type, destination, live_calls.created_at, live_calls.updated_at FROM live_calls\r\n      left join companies on live_calls.company_id = companies.id\r\n      left join countries on live_calls.country_id = countries.id\r\n      where live_calls.call_status=2 and live_calls.company_id= ${company_id}\r\n    `;\r\n    connection.query(query, (err, results) => {\r\n      if (err) {\r\n        return reject(err);\r\n      }\r\n      resolve(results);\r\n    });\r\n  });\r\n};\r\n\r\nconst getAllWaitingCalls = () => {\r\n  return new Promise((resolve, reject) => {\r\n    const query = `\r\n     SELECT companies.company_name, companies.email, countries.country_name, caller_num,agent_channel,agent_name,agent_number, call_status, call_type, tfn, destination_type, destination, live_calls.created_at, live_calls.updated_at FROM live_calls\r\n     left join companies on live_calls.company_id = companies.id\r\n     left join countries on live_calls.country_id = countries.id\r\n     where live_calls.call_status=2\r\n    `;\r\n    connection.query(query, (err, results) => {\r\n      if (err) {\r\n        return reject(err);\r\n      }\r\n      resolve(results);\r\n    });\r\n  });\r\n};\r\n\r\nconst getAllLiveCalls = () => {\r\n  return new Promise((resolve, reject) => {\r\n    const query = `\r\n     SELECT companies.company_name, companies.email, companies.id as company_id , countries.country_name, ip, caller_num,agent_channel,agent_name,agent_number, call_status, call_type, tfn, destination_type, destination, live_calls.created_at, live_calls.updated_at FROM live_calls\r\n     left join companies on live_calls.company_id = companies.id\r\n     left join countries on live_calls.country_id = countries.id\r\n     where live_calls.call_status=3\r\n    `;\r\n    connection.query(query, (err, results) => {\r\n      if (err) {\r\n        return reject(err);\r\n      }\r\n      resolve(results);\r\n    });\r\n  });\r\n};\r\n\r\nio.on(\"connection\", (socket) => {\r\n  let prevData = null;\r\n  let slug;\r\n  let company_id;\r\n\r\n  let previousCompanyLiveCallsHash = \"\";\r\n  let previousCompanyWaitingCallsHash = \"\";\r\n\r\n  let previousWaitingCallsHash = \"\";\r\n  let previousLiveCallsHash = \"\";\r\n\r\n  const getVerifyDoc = ({ id }) => {\r\n    return new Promise((resolve, reject) => {\r\n      const query = `\r\n          SELECT\r\n            CASE\r\n              WHEN is_verified_doc = 0 THEN 0\r\n              WHEN is_verified_doc = 1 THEN 1\r\n              WHEN is_verified_doc = 2 THEN 2\r\n              WHEN is_verified_doc = 3 THEN 3\r\n              ELSE 'Unknown status'\r\n            END AS status_message\r\n          FROM users\r\n          WHERE id = ${id};\r\n        `;\r\n      connection.query(query, (err, results) => {\r\n        if (err) {\r\n          return reject(err);\r\n        }\r\n        const statusMessage =\r\n          results.length > 0 ? results[0].status_message : \"No record found\";\r\n        resolve(statusMessage);\r\n      });\r\n    });\r\n  };\r\n\r\n  const pollStatus = async (userdata, previousStatus) => {\r\n    try {\r\n      const result = await getVerifyDoc(userdata);\r\n      const currentStatus = result;\r\n      if (currentStatus !== previousStatus) {\r\n        socket.emit(\"isVerifiedDoc\", {\r\n          userId: userdata.id,\r\n          statusMessage: result,\r\n        });\r\n      }\r\n      if (currentStatus != 1) {\r\n        setTimeout(() => pollStatus(userdata, currentStatus), 2000);\r\n      }\r\n    } catch (error) {\r\n      setTimeout(() => pollStatus(userdata, previousStatus), 2000);\r\n    }\r\n  };\r\n\r\n  const getDocumentsCount = () => {\r\n    return new Promise((resolve, reject) => {\r\n      const query = `SELECT count(*) as count FROM user_documents`;\r\n      connection.query(query, (err, results) => {\r\n        if (err) {\r\n          return reject(err);\r\n        }\r\n        const currentCount = results[0]?.count;\r\n        if (prevData !== null && currentCount !== prevData) {\r\n          socket.emit(\"changeDocCount\", { count: currentCount });\r\n        }\r\n        prevData = currentCount;\r\n        resolve(currentCount);\r\n      });\r\n    });\r\n  };\r\n\r\n  const getBalanceByCompany = (id) => {\r\n    return new Promise((resolve, reject) => {\r\n      const query = `SELECT id,company_name,email, balance FROM companies where id = ${id}`;\r\n      connection.query(query, (err, results) => {\r\n        if (err) {\r\n          return reject(err);\r\n        }\r\n        const currentBalalnce = results[0]?.balance;\r\n        socket.emit(\"fetchBalance\", currentBalalnce);\r\n        resolve(currentBalalnce);\r\n      });\r\n    });\r\n  };\r\n\r\n  socket.on(\"allUsers\", function () {\r\n    const userdata = socket.handshake.session.userdata;\r\n    socket.emit(\"getUsers\", { data: userdata });\r\n  });\r\n\r\n  socket.on(\"login\", async (userdata) => {\r\n    socket.handshake.session.userdata = userdata;\r\n    socket.handshake.session.save(async (err) => {\r\n      if (userdata.is_verified_doc !== 1) {\r\n        pollStatus(userdata, null);\r\n      }\r\n    });\r\n  });\r\n\r\n  //Upload documents notification\r\n  socket.on(\"handleFetchNewDocs\", async ({ params }) => {\r\n    try {\r\n      await getDocumentsCount();\r\n    } catch (error) {\r\n      console.log(\"Error\");\r\n    }\r\n  });\r\n  const fetchAllDocs = setInterval(async () => {\r\n    if ([\"super-admin\", \"noc\", \"support\"].includes(slug)) {\r\n      await getDocumentsCount();\r\n    }\r\n  }, 3000);\r\n  socket.on(\"disconnect\", () => {\r\n    clearInterval(fetchAllDocs);\r\n  });\r\n\r\n  //balance\r\n  socket.on(\"fetchBalanceReq\", async (id) => {\r\n    await getBalanceByCompany(id);\r\n  });\r\n\r\n  //Live calls\r\n  socket.on(\"fetchLiveCallsReq\", async (data) => {\r\n    try {\r\n      company_id = data.company_id;\r\n      const liveCalls = await getLiveCalls(data);\r\n      socket.emit(\"getLiveCallsRes\", liveCalls);\r\n      previousCompanyLiveCallsHash = generateHash(liveCalls); // Store hash after first fetch\r\n    } catch (error) {\r\n      socket.emit(\"getLiveCallsRes\", { error: \"Internal server error\" });\r\n    }\r\n  });\r\n  const fetchLiveCallsInterval = setInterval(async () => {\r\n    if (company_id) {\r\n      const data = { company_id: company_id };\r\n      const liveCalls = await getLiveCalls(data);\r\n      const currentHash = generateHash(liveCalls);\r\n      if (currentHash !== previousCompanyLiveCallsHash) {\r\n        socket.emit(\"getLiveCallsRes\", liveCalls);\r\n        previousCompanyLiveCallsHash = currentHash;\r\n      }\r\n    }\r\n  }, 1000);\r\n  socket.on(\"disconnect\", () => {\r\n    clearInterval(fetchLiveCallsInterval);\r\n  });\r\n\r\n  //Waiting calls\r\n  socket.on(\"fetchWaitingCallsReq\", async (data) => {\r\n    try {\r\n      company_id = data.company_id;\r\n      const waitingCalls = await getWaitingCalls(data);\r\n      socket.emit(\"getWaitingCallsRes\", waitingCalls);\r\n      previousCompanyWaitingCallsHash = generateHash(waitingCalls);\r\n    } catch (error) {\r\n      socket.emit(\"getWaitingCallsRes\", { error: \"Internal server error\" });\r\n    }\r\n  });\r\n  const fetchWaitingCallsInterval = setInterval(async () => {\r\n    if (company_id) {\r\n      const data = { company_id: company_id };\r\n      const waitingCalls = await getWaitingCalls(data);\r\n      const currentHash = generateHash(waitingCalls);\r\n      if (currentHash !== previousCompanyWaitingCallsHash) {\r\n        socket.emit(\"getWaitingCallsRes\", waitingCalls);\r\n        previousCompanyWaitingCallsHash = currentHash;\r\n      }\r\n    }\r\n  }, 1000);\r\n  socket.on(\"disconnect\", () => {\r\n    clearInterval(fetchWaitingCallsInterval);\r\n  });\r\n\r\n  //All Waiting calls\r\n  socket.on(\"fetchAllWaitingCallsReq\", async (data) => {\r\n    try {\r\n      slug = data.slug;\r\n      const waitingCalls = await getAllWaitingCalls();\r\n      socket.emit(\"getAllWaitingCallsRes\", waitingCalls);\r\n      previousWaitingCallsHash = generateHash(waitingCalls); // Store hash after first fetch\r\n    } catch (error) {\r\n      socket.emit(\"getAllWaitingCallsRes\", { error: \"Internal server error\" });\r\n    }\r\n  });\r\n  const fetchAllWaitingCallsInterval = setInterval(async () => {\r\n    if ([\"super-admin\", \"noc\", \"support\"].includes(slug)) {\r\n      try {\r\n        const currentWaitingCalls = await getAllWaitingCalls();\r\n        const currentHash = generateHash(currentWaitingCalls);\r\n        if (currentHash !== previousWaitingCallsHash) {\r\n          socket.emit(\"getAllWaitingCallsRes\", currentWaitingCalls);\r\n          previousWaitingCallsHash = currentHash;\r\n        }\r\n      } catch (error) {\r\n        socket.emit(\"getAllAllCallsRes\", { error: \"Internal server error\" });\r\n      }\r\n    }\r\n  }, 1000);\r\n  socket.on(\"disconnect\", () => {\r\n    clearInterval(fetchAllWaitingCallsInterval);\r\n  });\r\n\r\n  //All Live calls\r\n  socket.on(\"fetchAllLiveCallsReq\", async (data) => {\r\n    try {\r\n      slug = data.slug;\r\n      const allLiveCalls = await getAllLiveCalls();\r\n      socket.emit(\"getAllAllCallsRes\", allLiveCalls);\r\n      previousLiveCallsHash = generateHash(allLiveCalls); // Store hash after first fetch\r\n    } catch (error) {\r\n      socket.emit(\"getAllAllCallsRes\", { error: \"Internal server error\" });\r\n    }\r\n  });\r\n  const fetchAllLiveCallsInterval = setInterval(async () => {\r\n    if ([\"super-admin\", \"noc\", \"support\"].includes(slug)) {\r\n      try {\r\n        const currentLiveCalls = await getAllLiveCalls();\r\n        const currentHash = generateHash(currentLiveCalls);\r\n        if (currentHash !== previousLiveCallsHash) {\r\n          socket.emit(\"getAllAllCallsRes\", currentLiveCalls);\r\n          previousLiveCallsHash = currentHash;\r\n        }\r\n      } catch (error) {\r\n        socket.emit(\"getAllAllCallsRes\", { error: \"Internal server error\" });\r\n      }\r\n    }\r\n  }, 1000);\r\n  socket.on(\"disconnect\", () => {\r\n    clearInterval(fetchAllLiveCallsInterval);\r\n  });\r\n\r\n  socket.on(\"logout\", function () {\r\n    if (socket.handshake.session.userdata) {\r\n      delete socket.handshake.session.userdata;\r\n      socket.handshake.session.save();\r\n    }\r\n  });\r\n});\r\n\r\napp.use((req, res, next) => {\r\n  next();\r\n});\r\n"],"mappings":"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","ignoreList":[]}