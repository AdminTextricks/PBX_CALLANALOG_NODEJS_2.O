{"version":3,"file":"index.js","names":["express","require","http","WebSocket","cors","connection","app","server","createServer","wss","Server","crypto","use","origin","process","env","CORS_FRONTEND_URL","credentials","generateHash","data","Array","isArray","cleanedData","map","item","updated_at","rest","createHash","update","JSON","stringify","digest","on","console","log","end","err","error","exit","ws","userId","currentBalance","previousCompanyLiveCallsHash","previousCompanyWaitCallsHash","message","parse","action","fetchBalance","callback","query","results","balance","initialBalance","send","balanceInterval","setInterval","newBalance","clearInterval","livecalls","currentHash","fetchWaitBalance","length","waitcalls","fetchWaitCalls","initialCalls","listen"],"sources":["../src/index.js"],"sourcesContent":["const express = require(\"express\");\r\nconst http = require(\"http\");\r\nconst WebSocket = require(\"ws\");\r\nconst cors = require(\"cors\");\r\nconst connection = require(\"./db\");\r\nconst app = express();\r\nconst server = http.createServer(app);\r\nconst wss = new WebSocket.Server({ server });\r\nconst crypto = require(\"crypto\");\r\n\r\n// Enable CORS\r\napp.use(\r\n  cors({\r\n    origin: process.env.CORS_FRONTEND_URL,\r\n    credentials: true,\r\n  })\r\n);\r\n\r\nfunction generateHash(data) {\r\n  // Ensure data is an array\r\n  if (!Array.isArray(data)) {\r\n    return null; // Or handle it as needed\r\n  }\r\n\r\n  const cleanedData = data.map((item) => {\r\n    const { updated_at, ...rest } = item; // Exclude updated_at\r\n    return rest;\r\n  });\r\n\r\n  return crypto\r\n    .createHash(\"md5\")\r\n    .update(JSON.stringify(cleanedData))\r\n    .digest(\"hex\");\r\n}\r\n\r\n// connection.connect((err) => {\r\n//   if (err) throw err;\r\n//   console.log(\"Connected to MySQL\");\r\n// });\r\n\r\n// Handle process termination to close MySQL connection gracefully\r\nprocess.on(\"SIGINT\", () => {\r\n  console.log(\r\n    \"Received SIGINT. Closing MySQL connection and shutting down server.\"\r\n  );\r\n  connection.end((err) => {\r\n    if (err) {\r\n      console.error(\"Error closing MySQL connection:\", err);\r\n    } else {\r\n      console.log(\"MySQL connection closed.\");\r\n    }\r\n    process.exit(0); // Exit the process\r\n  });\r\n});\r\n\r\nprocess.on(\"SIGTERM\", () => {\r\n  console.log(\r\n    \"Received SIGTERM. Closing MySQL connection and shutting down server.\"\r\n  );\r\n  connection.end((err) => {\r\n    if (err) {\r\n      console.error(\"Error closing MySQL connection:\", err);\r\n    } else {\r\n      console.log(\"MySQL connection closed.\");\r\n    }\r\n    process.exit(0); // Exit the process\r\n  });\r\n});\r\n\r\n// WebSocket connection\r\n// Existing WebSocket connection code\r\nwss.on(\"connection\", (ws) => {\r\n  \r\n  let userId = null;\r\n  let currentBalance = null;\r\n  let previousCompanyLiveCallsHash = \"\";\r\n  let previousCompanyWaitCallsHash = \"\";\r\n\r\n  // Handle balance fetching\r\n  ws.on(\"message\", (message) => {\r\n    const data = JSON.parse(message);\r\n\r\n    if (data.action === \"fetchBalance\") {\r\n      userId = data.userId;\r\n\r\n      // Function to fetch balance\r\n      const fetchBalance = (callback) => {\r\n        connection.query(\r\n          \"SELECT id, company_name, email, balance FROM companies WHERE id = ?\",\r\n          [userId],\r\n          (err, results) => {\r\n            if (err) {\r\n              console.error(\"Database query error:\", err);\r\n              return callback(null);\r\n            }\r\n            callback(results[0] ? results[0].balance : null);\r\n          }\r\n        );\r\n      };\r\n\r\n      // Initial balance fetch\r\n      fetchBalance((initialBalance) => {\r\n        currentBalance = initialBalance;\r\n        ws.send(JSON.stringify({ balance: currentBalance }));\r\n\r\n        // Balance update interval\r\n        const balanceInterval = setInterval(() => {\r\n          fetchBalance((newBalance) => {\r\n            if (newBalance !== currentBalance) {\r\n              ws.send(JSON.stringify({ balance: newBalance }));\r\n              currentBalance = newBalance;\r\n            }\r\n          });\r\n        }, 2000);\r\n\r\n        // Clear the interval on WebSocket close\r\n        ws.on(\"close\", () => {\r\n          clearInterval(balanceInterval);\r\n        });\r\n      });\r\n    }\r\n\r\n    if (data.action === \"fetchResellerBalance\") {\r\n      userId = data.userId;\r\n\r\n      // Function to fetch the balance\r\n      const fetchBalance = (callback) => {\r\n        connection.query(\r\n          \"SELECT balance FROM `reseller_wallets` WHERE user_id = ?\",\r\n          [userId],\r\n          (err, results) => {\r\n            if (err) {\r\n              console.error(\"Database query error:\", err);\r\n              callback(null);\r\n            } else {\r\n              callback(results[0] ? results[0].balance : null);\r\n            }\r\n          }\r\n        );\r\n      };\r\n\r\n      // Initial balance fetch\r\n      fetchBalance((initialBalance) => {\r\n        currentBalance = initialBalance;\r\n        ws.send(JSON.stringify({ balance: currentBalance }));\r\n\r\n        // Balance update interval\r\n        const balanceInterval = setInterval(() => {\r\n          fetchBalance((newBalance) => {\r\n            if (newBalance !== currentBalance) {\r\n              ws.send(JSON.stringify({ balance: newBalance }));\r\n              currentBalance = newBalance;\r\n            }\r\n          });\r\n        }, 2000);\r\n\r\n        // Clear the interval on WebSocket close\r\n        ws.on(\"close\", () => {\r\n          clearInterval(balanceInterval);\r\n        });\r\n      });\r\n    }\r\n\r\n    if (data.action === \"fetchCompanyLivecalls\") {\r\n      userId = data.userId;\r\n\r\n      const fetchBalance = (callback) => {\r\n        const query = `\r\n          SELECT \r\n            companies.company_name, \r\n            companies.email, \r\n            companies.id AS company_id, \r\n            countries.country_name, \r\n            caller_num, \r\n            agent_channel, \r\n            agent_name, \r\n            agent_number, \r\n            call_status, \r\n            call_type, \r\n            tfn, \r\n            destination_type, \r\n            destination, \r\n            live_calls.created_at, \r\n            live_calls.updated_at \r\n          FROM \r\n            live_calls \r\n          LEFT JOIN \r\n            companies ON live_calls.company_id = companies.id \r\n          LEFT JOIN \r\n            countries ON live_calls.country_id = countries.id \r\n          WHERE \r\n            live_calls.call_status = 3 AND \r\n            live_calls.company_id = ?`;\r\n\r\n        connection.query(query, [userId], (err, results) => {\r\n          if (err) {\r\n            return callback(null);\r\n          }\r\n          callback(results ? results : null);\r\n        });\r\n      };\r\n\r\n      // Initial balance fetch\r\n      fetchBalance((initialBalance) => {\r\n        previousCompanyLiveCallsHash = generateHash(initialBalance);\r\n\r\n        ws.send(JSON.stringify({ initialBalance }));\r\n\r\n        // Balance update interval\r\n        const balanceInterval = setInterval(() => {\r\n          fetchBalance((livecalls) => {\r\n            ws.send(JSON.stringify({ livecalls }));\r\n            const currentHash = generateHash(livecalls);\r\n            if (previousCompanyLiveCallsHash !== currentHash) {\r\n              ws.send(JSON.stringify({ livecalls }));\r\n              previousCompanyLiveCallsHash = generateHash(currentHash);\r\n            }\r\n          });\r\n        }, 1000);\r\n\r\n        // Clear the interval on WebSocket close\r\n        ws.on(\"close\", () => {\r\n          clearInterval(balanceInterval);\r\n        });\r\n      });\r\n    }\r\n\r\n    if (data.action === \"fetchCompanyWaitingcalls\") {\r\n      userId = data.userId;\r\n\r\n      const fetchWaitBalance = (callback) => {\r\n        const query = `\r\n             SELECT companies.company_name, companies.email, countries.country_name, caller_num,agent_channel,agent_name,agent_number, call_status, call_type, tfn, destination_type, destination, live_calls.created_at, live_calls.updated_at FROM live_calls left join companies on live_calls.company_id = companies.id left join countries on live_calls.country_id = countries.id where live_calls.call_status=2 and live_calls.company_id = ?`;\r\n        connection.query(query, [userId], (err, results) => {\r\n          if (err) {\r\n            return callback([]);\r\n          }\r\n          callback(results && results.length > 0 ? results : []);\r\n        });\r\n      };\r\n\r\n      // Initial balance fetch\r\n      fetchWaitBalance((initialBalance) => {\r\n        previousCompanyWaitCallsHash = generateHash(initialBalance);\r\n\r\n        ws.send(JSON.stringify({ initialBalance }));\r\n\r\n        // Balance update interval\r\n        const balanceInterval = setInterval(() => {\r\n          fetchWaitBalance((waitcalls) => {\r\n            ws.send(JSON.stringify({ waitcalls }));\r\n            const currentHash = generateHash(waitcalls);\r\n            if (previousCompanyWaitCallsHash !== currentHash) {\r\n              ws.send(JSON.stringify({ waitcalls }));\r\n              previousCompanyWaitCallsHash = generateHash(currentHash);\r\n            }\r\n          });\r\n        }, 1000);\r\n\r\n        // Clear the interval on WebSocket close\r\n        ws.on(\"close\", () => {\r\n          clearInterval(balanceInterval);\r\n        });\r\n      });\r\n    }\r\n\r\n    if (data.action === \"fetchAllWaitingcalls\") {\r\n      const fetchWaitCalls = (callback) => {\r\n        const query = `\r\n            SELECT companies.company_name, companies.email, countries.country_name, caller_num,agent_channel,agent_name,agent_number, call_status, call_type, tfn, destination_type, destination, live_calls.created_at, live_calls.updated_at FROM live_calls\r\n            left join companies on live_calls.company_id = companies.id left join countries on live_calls.country_id = countries.id where live_calls.call_status=2`;\r\n        connection.query(query, (err, results) => {\r\n          if (err) {\r\n            return callback([]);\r\n          }\r\n          callback(results && results.length > 0 ? results : []);\r\n        });\r\n      };\r\n\r\n      // Initial balance fetch\r\n      fetchWaitCalls((initialCalls) => {\r\n        previousCompanyWaitCallsHash = generateHash(initialCalls);\r\n\r\n        ws.send(JSON.stringify({ initialCalls }));\r\n\r\n        // Balance update interval\r\n        const balanceInterval = setInterval(() => {\r\n          fetchWaitCalls((waitcalls) => {\r\n            ws.send(JSON.stringify({ waitcalls }));\r\n            const currentHash = generateHash(waitcalls);\r\n            if (previousCompanyWaitCallsHash !== currentHash) {\r\n              ws.send(JSON.stringify({ waitcalls }));\r\n              previousCompanyWaitCallsHash = generateHash(currentHash);\r\n            }\r\n          });\r\n        }, 1000);\r\n\r\n        // Clear the interval on WebSocket close\r\n        ws.on(\"close\", () => {\r\n          clearInterval(balanceInterval);\r\n        });\r\n      });\r\n    }\r\n\r\n    if (data.action === \"fetchSuperAllLivecalls\") {\r\n      const fetchBalance = (callback) => {\r\n        const query = `\r\n          SELECT \r\n            companies.company_name, \r\n            companies.email, \r\n            companies.id AS company_id, \r\n            countries.country_name, \r\n            caller_num, \r\n            agent_channel, \r\n            agent_name, \r\n            agent_number, \r\n            call_status, \r\n            call_type, \r\n            tfn, \r\n            destination_type, \r\n            destination, \r\n            live_calls.created_at, \r\n            live_calls.updated_at \r\n          FROM \r\n            live_calls \r\n          LEFT JOIN \r\n            companies ON live_calls.company_id = companies.id \r\n          LEFT JOIN \r\n            countries ON live_calls.country_id = countries.id \r\n          WHERE \r\n            live_calls.call_status = 3`;\r\n\r\n        connection.query(query, (err, results) => {\r\n          if (err) {\r\n            return callback(null);\r\n          }\r\n          callback(results ? results : null);\r\n        });\r\n      };\r\n\r\n      // Initial balance fetch\r\n      fetchBalance((initialBalance) => {\r\n        previousCompanyLiveCallsHash = generateHash(initialBalance);\r\n\r\n        ws.send(JSON.stringify({ initialBalance }));\r\n\r\n        // Balance update interval\r\n        const balanceInterval = setInterval(() => {\r\n          fetchBalance((livecalls) => {\r\n            ws.send(JSON.stringify({ livecalls }));\r\n            const currentHash = generateHash(livecalls);\r\n            if (previousCompanyLiveCallsHash !== currentHash) {\r\n              ws.send(JSON.stringify({ livecalls }));\r\n              previousCompanyLiveCallsHash = generateHash(currentHash);\r\n            }\r\n          });\r\n        }, 1000);\r\n\r\n        // Clear the interval on WebSocket close\r\n        ws.on(\"close\", () => {\r\n          clearInterval(balanceInterval);\r\n        });\r\n      });\r\n    }\r\n  });\r\n});\r\n\r\n// Start server on port 8001\r\nserver.listen(8001, () => {\r\n  console.log(\"Server is listening on port 8001\");\r\n});"],"mappings":"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","ignoreList":[]}