{"version":3,"file":"index.js","names":["express","require","WebSocket","cors","connection","crypto","app","fs","bodyParser","use","json","https","options","cert","readFileSync","key","server","createServer","wss","Server","origin","process","env","CORS_FRONTEND_URL","credentials","generateHash","data","Array","isArray","cleanedData","map","item","updated_at","rest","createHash","update","JSON","stringify","digest","on","console","log","end","err","error","exit","ws","userId","prevData","currentBalance","previousCompanyLiveCallsHash","previousCompanyWaitCallsHash","message","parse","action","fetchBalance","callback","query","results","balance","initialBalance","send","balanceInterval","setInterval","newBalance","clearInterval","livecalls","currentHash","fetchWaitBalance","length","waitcalls","fetchWaitCalls","initialCalls","fetchDocCount","currentCount","count","initialCount","newCount","listen"],"sources":["../src/index.js"],"sourcesContent":["const express = require(\"express\");\r\nconst WebSocket = require(\"ws\");\r\nconst cors = require(\"cors\");\r\nconst connection = require(\"./db\");\r\nconst crypto = require(\"crypto\");\r\nconst app = express();\r\nconst fs = require('fs');\r\nconst bodyParser = require(\"body-parser\");\r\n\r\napp.use(bodyParser.json());\r\n\r\n// Development>>>>>>>>>>>>>>>>\r\n// const http = require(\"http\");\r\n// const server = http.createServer(app);\r\n// const wss = new WebSocket.Server({ server });\r\n\r\n// Production>>>>>>>>>>>>>>>>>>\r\n\r\nconst https = require(\"https\");\r\nconst options = {\r\n  cert: fs.readFileSync(\"/etc/letsencrypt/live/socket.callanalog.com-0004/fullchain.pem\"),  // Path to SSL certificate\r\n  key: fs.readFileSync(\"/etc/letsencrypt/live/socket.callanalog.com-0004/privkey.pem\")     // Path to SSL key\r\n    //ca: fs.readFileSync(\"/etc/letsencrypt/live/socket.callanalog.com/chain.pem\")\r\n    };\r\nconst server = https.createServer(options,app);\r\nconst wss = new WebSocket.Server({ server });\r\n\r\n// Enable CORS\r\napp.use(\r\n  cors({\r\n    origin: process.env.CORS_FRONTEND_URL,\r\n    credentials: true,\r\n  })\r\n);\r\n\r\nfunction generateHash(data) {\r\n  // Ensure data is an array\r\n  if (!Array.isArray(data)) {\r\n    return null; // Or handle it as needed\r\n  }\r\n\r\n  const cleanedData = data.map((item) => {\r\n    const { updated_at, ...rest } = item; // Exclude updated_at\r\n    return rest;\r\n  });\r\n\r\n  return crypto\r\n    .createHash(\"md5\")\r\n    .update(JSON.stringify(cleanedData))\r\n    .digest(\"hex\");\r\n}\r\n\r\n// Handle process termination to close MySQL connection gracefully\r\nprocess.on(\"SIGINT\", () => {\r\n  console.log(\r\n    \"Received SIGINT. Closing MySQL connection and shutting down server.\"\r\n  );\r\n  connection.end((err) => {\r\n    if (err) {\r\n      console.error(\"Error closing MySQL connection:\", err);\r\n    } else {\r\n      console.log(\"MySQL connection closed.\");\r\n    }\r\n    process.exit(0); // Exit the process\r\n  });\r\n});\r\n\r\nprocess.on(\"SIGTERM\", () => {\r\n  console.log(\r\n    \"Received SIGTERM. Closing MySQL connection and shutting down server.\"\r\n  );\r\n  connection.end((err) => {\r\n    if (err) {\r\n      console.error(\"Error closing MySQL connection:\", err);\r\n    } else {\r\n      console.log(\"MySQL connection closed.\");\r\n    }\r\n    process.exit(0); // Exit the process\r\n  });\r\n});\r\n\r\n// WebSocket connection\r\nwss.on(\"connection\", (ws) => {\r\n  let userId = null;\r\n  let prevData = null;\r\n  let currentBalance = null;\r\n  let previousCompanyLiveCallsHash = \"\";\r\n  let previousCompanyWaitCallsHash = \"\";\r\n\r\n  // Handle balance fetching\r\n  ws.on(\"message\", (message) => {\r\n    const data = JSON.parse(message);\r\n\r\n    if (data.action === \"fetchBalance\") {\r\n      userId = data.userId;\r\n\r\n      // Function to fetch balance\r\n      const fetchBalance = (callback) => {\r\n        connection.query(\r\n          \"SELECT id, company_name, email, balance FROM companies WHERE id = ?\",\r\n          [userId],\r\n          (err, results) => {\r\n            if (err) {\r\n              console.error(\"Database query error:\", err);\r\n              return callback(null);\r\n            }\r\n            callback(results[0] ? results[0].balance : null);\r\n          }\r\n        );\r\n      };\r\n\r\n      // Initial balance fetch\r\n      fetchBalance((initialBalance) => {\r\n        currentBalance = initialBalance;\r\n        ws.send(JSON.stringify({ balance: currentBalance }));\r\n\r\n        // Balance update interval\r\n        const balanceInterval = setInterval(() => {\r\n          fetchBalance((newBalance) => {\r\n            if (newBalance !== currentBalance) {\r\n              ws.send(JSON.stringify({ balance: newBalance }));\r\n              currentBalance = newBalance;\r\n            }\r\n          });\r\n        }, 2000);\r\n\r\n        // Clear the interval on WebSocket close\r\n        ws.on(\"close\", () => {\r\n          clearInterval(balanceInterval);\r\n        });\r\n      });\r\n    }\r\n\r\n    if (data.action === \"fetchResellerBalance\") {\r\n      userId = data.userId;\r\n\r\n      // Function to fetch the balance\r\n      const fetchBalance = (callback) => {\r\n        connection.query(\r\n          \"SELECT balance FROM `reseller_wallets` WHERE user_id = ?\",\r\n          [userId],\r\n          (err, results) => {\r\n            if (err) {\r\n              console.error(\"Database query error:\", err);\r\n              callback(null);\r\n            } else {\r\n              callback(results[0] ? results[0].balance : null);\r\n            }\r\n          }\r\n        );\r\n      };\r\n\r\n      // Initial balance fetch\r\n      fetchBalance((initialBalance) => {\r\n        currentBalance = initialBalance;\r\n        ws.send(JSON.stringify({ balance: currentBalance }));\r\n\r\n        // Balance update interval\r\n        const balanceInterval = setInterval(() => {\r\n          fetchBalance((newBalance) => {\r\n            if (newBalance !== currentBalance) {\r\n              ws.send(JSON.stringify({ balance: newBalance }));\r\n              currentBalance = newBalance;\r\n            }\r\n          });\r\n        }, 2000);\r\n\r\n        // Clear the interval on WebSocket close\r\n        ws.on(\"close\", () => {\r\n          clearInterval(balanceInterval);\r\n        });\r\n      });\r\n    }\r\n\r\n    if (data.action === \"fetchCompanyLivecalls\") {\r\n      userId = data.userId;\r\n\r\n      const fetchBalance = (callback) => {\r\n        const query = `\r\n          SELECT \r\n            companies.company_name, \r\n            companies.email, \r\n            companies.id AS company_id, \r\n            countries.country_name, \r\n            caller_num, \r\n            agent_channel, \r\n            agent_name, \r\n            agent_number, \r\n            call_status, \r\n            call_type, \r\n            tfn, \r\n            destination_type, \r\n            destination, \r\n            live_calls.created_at, \r\n            live_calls.updated_at \r\n          FROM \r\n            live_calls \r\n          LEFT JOIN \r\n            companies ON live_calls.company_id = companies.id \r\n          LEFT JOIN \r\n            countries ON live_calls.country_id = countries.id \r\n          WHERE \r\n            live_calls.call_status = 3 AND \r\n            live_calls.company_id = ?`;\r\n\r\n        connection.query(query, [userId], (err, results) => {\r\n          if (err) {\r\n            return callback(null);\r\n          }\r\n          callback(results ? results : null);\r\n        });\r\n      };\r\n\r\n      // Initial balance fetch\r\n      fetchBalance((initialBalance) => {\r\n        previousCompanyLiveCallsHash = generateHash(initialBalance);\r\n\r\n        ws.send(JSON.stringify({ initialBalance }));\r\n\r\n        // Balance update interval\r\n        const balanceInterval = setInterval(() => {\r\n          fetchBalance((livecalls) => {\r\n            ws.send(JSON.stringify({ livecalls }));\r\n            const currentHash = generateHash(livecalls);\r\n            if (previousCompanyLiveCallsHash !== currentHash) {\r\n              ws.send(JSON.stringify({ livecalls }));\r\n              previousCompanyLiveCallsHash = generateHash(currentHash);\r\n            }\r\n          });\r\n        }, 1000);\r\n\r\n        // Clear the interval on WebSocket close\r\n        ws.on(\"close\", () => {\r\n          clearInterval(balanceInterval);\r\n        });\r\n      });\r\n    }\r\n\r\n    if (data.action === \"fetchCompanyWaitingcalls\") {\r\n      userId = data.userId;\r\n\r\n      const fetchWaitBalance = (callback) => {\r\n        const query = `\r\n             SELECT companies.company_name, companies.email, countries.country_name, caller_num,agent_channel,agent_name,agent_number, call_status, call_type, tfn, destination_type, destination, live_calls.created_at, live_calls.updated_at FROM live_calls left join companies on live_calls.company_id = companies.id left join countries on live_calls.country_id = countries.id where live_calls.call_status=2 and live_calls.company_id = ?`;\r\n        connection.query(query, [userId], (err, results) => {\r\n          if (err) {\r\n            return callback([]);\r\n          }\r\n          callback(results && results.length > 0 ? results : []);\r\n        });\r\n      };\r\n\r\n      // Initial balance fetch\r\n      fetchWaitBalance((initialBalance) => {\r\n        previousCompanyWaitCallsHash = generateHash(initialBalance);\r\n\r\n        ws.send(JSON.stringify({ initialBalance }));\r\n\r\n        // Balance update interval\r\n        const balanceInterval = setInterval(() => {\r\n          fetchWaitBalance((waitcalls) => {\r\n            ws.send(JSON.stringify({ waitcalls }));\r\n            const currentHash = generateHash(waitcalls);\r\n            if (previousCompanyWaitCallsHash !== currentHash) {\r\n              ws.send(JSON.stringify({ waitcalls }));\r\n              previousCompanyWaitCallsHash = generateHash(currentHash);\r\n            }\r\n          });\r\n        }, 1000);\r\n\r\n        // Clear the interval on WebSocket close\r\n        ws.on(\"close\", () => {\r\n          clearInterval(balanceInterval);\r\n        });\r\n      });\r\n    }\r\n\r\n    if (data.action === \"fetchAllWaitingcalls1\") {\r\n      const fetchWaitCalls = (callback) => {\r\n        const query = `\r\n            SELECT companies.company_name, companies.email, countries.country_name, caller_num,agent_channel,agent_name,agent_number, call_status, call_type, tfn, destination_type, destination, live_calls.created_at, live_calls.updated_at FROM live_calls\r\n            left join companies on live_calls.company_id = companies.id left join countries on live_calls.country_id = countries.id where live_calls.call_status=2`;\r\n        connection.query(query, (err, results) => {\r\n          if (err) {\r\n            return callback([]);\r\n          }\r\n          callback(results && results.length > 0 ? results : []);\r\n        });\r\n      };\r\n\r\n      // Initial balance fetch\r\n      fetchWaitCalls((initialCalls) => {\r\n        previousCompanyWaitCallsHash = generateHash(initialCalls);\r\n\r\n        ws.send(JSON.stringify({ initialCalls }));\r\n\r\n        // Balance update interval\r\n        const balanceInterval = setInterval(() => {\r\n          fetchWaitCalls((waitcalls) => {\r\n            ws.send(JSON.stringify({ waitcalls }));\r\n            const currentHash = generateHash(waitcalls);\r\n            if (previousCompanyWaitCallsHash !== currentHash) {\r\n              ws.send(JSON.stringify({ waitcalls }));\r\n              previousCompanyWaitCallsHash = generateHash(currentHash);\r\n            }\r\n          });\r\n        }, 1000);\r\n\r\n        // Clear the interval on WebSocket close\r\n        ws.on(\"close\", () => {\r\n          clearInterval(balanceInterval);\r\n        });\r\n      });\r\n    }\r\n\r\n    if (data.action === \"fetchSuperAllLivecalls\") {\r\n      const fetchBalance = (callback) => {\r\n        const query = `\r\n          SELECT \r\n            companies.company_name, \r\n            companies.email, \r\n            companies.id AS company_id, \r\n            countries.country_name, \r\n            caller_num, \r\n            agent_channel, \r\n            agent_name, \r\n            agent_number, \r\n            call_status, \r\n            call_type, \r\n            tfn, \r\n            destination_type, \r\n            destination, \r\n            live_calls.created_at, \r\n            live_calls.updated_at \r\n          FROM \r\n            live_calls \r\n          LEFT JOIN \r\n            companies ON live_calls.company_id = companies.id \r\n          LEFT JOIN \r\n            countries ON live_calls.country_id = countries.id \r\n          WHERE \r\n            live_calls.call_status = 3`;\r\n\r\n        connection.query(query, (err, results) => {\r\n          if (err) {\r\n            return callback(null);\r\n          }\r\n          callback(results ? results : null);\r\n        });\r\n      };\r\n\r\n      // Initial balance fetch\r\n      fetchBalance((initialBalance) => {\r\n        previousCompanyLiveCallsHash = generateHash(initialBalance);\r\n\r\n        ws.send(JSON.stringify({ initialBalance }));\r\n\r\n        // Balance update interval\r\n        const balanceInterval = setInterval(() => {\r\n          fetchBalance((livecalls) => {\r\n            ws.send(JSON.stringify({ livecalls }));\r\n            const currentHash = generateHash(livecalls);\r\n            if (previousCompanyLiveCallsHash !== currentHash) {\r\n              ws.send(JSON.stringify({ livecalls }));\r\n              previousCompanyLiveCallsHash = generateHash(currentHash);\r\n            }\r\n          });\r\n        }, 1000);\r\n\r\n        // Clear the interval on WebSocket close\r\n        ws.on(\"close\", () => {\r\n          clearInterval(balanceInterval);\r\n        });\r\n      });\r\n    }\r\n\r\n    if (data.action === \"fetchNewDocs\") {\r\n      const fetchDocCount = (callback) => {\r\n        const query = `SELECT count(*) as count FROM user_documents WHERE status = 0`;\r\n        connection.query(query, (err, results) => {\r\n          if (err) {\r\n            return callback(err, null);\r\n          }\r\n          const currentCount = results[0]?.count || 0;\r\n          callback(null, currentCount);\r\n        });\r\n      };\r\n\r\n      // Initial document count fetch\r\n      fetchDocCount((err, initialCount) => {\r\n        if (err) {\r\n          console.error(\"Error fetching count:\", err);\r\n          return;\r\n        }\r\n\r\n        prevData = initialCount;\r\n        ws.send(JSON.stringify({ count: prevData }));\r\n\r\n        const balanceInterval = setInterval(() => {\r\n          fetchDocCount((err, newCount) => {\r\n            if (err) {\r\n              console.error(\"Error fetching new count:\", err);\r\n              return;\r\n            }\r\n            if (newCount !== prevData && newCount > prevData) {\r\n              ws.send(JSON.stringify({ count: newCount }));\r\n              prevData = newCount;\r\n            }\r\n          });\r\n        }, 2000);\r\n        ws.on(\"close\", () => {\r\n          clearInterval(balanceInterval);\r\n        });\r\n      });\r\n    }\r\n\r\n    if (data.action === \"fetchResellerBalance\") {\r\n      userId = data.userId;\r\n\r\n      // Function to fetch the balance\r\n      const fetchBalance = (callback) => {\r\n        connection.query(\r\n          \"SELECT balance FROM `reseller_wallets` WHERE user_id = ?\",\r\n          [userId],\r\n          (err, results) => {\r\n            if (err) {\r\n              console.error(\"Database query error:\", err);\r\n              callback(null);\r\n            } else {\r\n              callback(results[0] ? results[0].balance : null);\r\n            }\r\n          }\r\n        );\r\n      };\r\n\r\n      // Initial document\r\n      fetchBalance((initialBalance) => {\r\n        currentBalance = initialBalance;\r\n        ws.send(JSON.stringify({ balance: currentBalance }));\r\n\r\n        // Balance update interval\r\n        const balanceInterval = setInterval(() => {\r\n          fetchBalance((newBalance) => {\r\n            if (newBalance !== currentBalance) {\r\n              ws.send(JSON.stringify({ balance: newBalance }));\r\n              currentBalance = newBalance;\r\n            }\r\n          });\r\n        }, 2000);\r\n\r\n        // Clear the interval on WebSocket close\r\n        ws.on(\"close\", () => {\r\n          clearInterval(balanceInterval);\r\n        });\r\n      });\r\n    }\r\n\r\n  });\r\n});\r\n\r\n// Start server on port 8003\r\nserver.listen(8003, () => {\r\n  console.log(\"Server is listening on port 8003\");\r\n});\r\n"],"mappings":"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","ignoreList":[]}