{"version":3,"file":"index.js","names":["express","require","WebSocket","cors","connection","crypto","app","fs","bodyParser","logger","use","json","https","options","cert","readFileSync","key","server","createServer","wss","Server","origin","process","env","CORS_FRONTEND_URL","credentials","generateHash","data","Array","isArray","cleanedData","map","item","updated_at","rest","createHash","update","JSON","stringify","digest","on","end","err","error","info","exit","ws","userId","id","user_type","prevData","currentBalance","previousCompanyLiveCallsHash","previousCompanyWaitCallsHash","currentDocStatus","todayLiveCountHash","todayAnswerCountHash","prevUnreadCount","message","parse","action","fetchUserActive","callback","query","results","userData","status","send","user_status","is_active","fetchUserActiveInterval","setInterval","clearInterval","fetchBalance","balance","initialBalance","balanceInterval","newBalance","livecalls","currentHash","fetchWaitBalance","length","waitcalls","fetchWaitCalls","initialCalls","fetchDocCount","currentCount","count","initialCount","newCount","fetchDocStatus","status_message","initStatus","fetchDocStatusInterval","newStatus","GET_CALLS_COUNT_FOR_SUPERADMIN","initCount","today_count","SUPERADMIN_CALLS_COUNT_INTERVAL","GET_ANSWER_CALLS_COUNT_FOR_SUPERADMIN","initAnsCount","SUPERADMIN_CALLS_ANS_COUNT_INTERVAL","GET_CALLS_COUNT_FOR_COMPANY","COMPANY_CALLS_COUNT_INTERVAL","GET_ANSWER_CALLS_COUNT_FOR_COMPANY","COMPANY_CALLS_ANS_COUNT_INTERVAL","user_data","user_id","superadmin_query","user_query","GET_NOTIFICATION","includes","notification_recipients_count","newNotification","unreadCount","getNotification","unread_counts","listen"],"sources":["../src/index.js"],"sourcesContent":["const express = require(\"express\");\r\nconst WebSocket = require(\"ws\");\r\nconst cors = require(\"cors\");\r\nconst connection = require(\"./db\");\r\nconst crypto = require(\"crypto\");\r\nconst app = express();\r\nconst fs = require(\"fs\");\r\nconst bodyParser = require(\"body-parser\");\r\nconst logger = require(\"./Logger\");\r\n\r\napp.use(bodyParser.json());\r\n\r\n// Development>>>>>>>>>>>>>>>>\r\n// const http = require(\"http\");\r\n// const server = http.createServer(app);\r\n// const wss = new WebSocket.Server({ server });\r\n\r\n// Production>>>>>>>>>>>>>>>>>>\r\n\r\nconst https = require(\"https\");\r\nconst options = {\r\n  cert: fs.readFileSync(\r\n    \"/etc/letsencrypt/live/socket.callanalog.com-0004/fullchain.pem\"\r\n  ),\r\n  key: fs.readFileSync(\r\n    \"/etc/letsencrypt/live/socket.callanalog.com-0004/privkey.pem\"\r\n  ),\r\n};\r\nconst server = https.createServer(options, app);\r\nconst wss = new WebSocket.Server({ server });\r\n\r\n// Enable CORS\r\napp.use(\r\n  cors({\r\n    origin: process.env.CORS_FRONTEND_URL,\r\n    credentials: true,\r\n  })\r\n);\r\n\r\nfunction generateHash(data) {\r\n  // Ensure data is an array\r\n  if (!Array.isArray(data)) {\r\n    return null; // Or handle it as needed\r\n  }\r\n\r\n  const cleanedData = data.map((item) => {\r\n    const { updated_at, ...rest } = item; // Exclude updated_at\r\n    return rest;\r\n  });\r\n\r\n  return crypto\r\n    .createHash(\"md5\")\r\n    .update(JSON.stringify(cleanedData))\r\n    .digest(\"hex\");\r\n}\r\n\r\n// Handle process termination to close MySQL connection gracefully\r\nprocess.on(\"SIGINT\", () => {\r\n  connection.end((err) => {\r\n    if (err) {\r\n      logger.error(err);\r\n    } else {\r\n      logger.info(\"MySQL connection closed.\");\r\n    }\r\n    process.exit(0); // Exit the process\r\n  });\r\n});\r\n\r\nprocess.on(\"SIGTERM\", () => {\r\n  connection.end((err) => {\r\n    if (err) {\r\n      logger.error(err);\r\n    } else {\r\n      logger.info(\"MySQL connection closed.\");\r\n    }\r\n    process.exit(0); // Exit the process\r\n  });\r\n});\r\n\r\n// WebSocket connection\r\nwss.on(\"connection\", (ws) => {\r\n  let userId = null;\r\n  let id = null;\r\n  let user_type = null;\r\n  let prevData = null;\r\n  let currentBalance = null;\r\n  let previousCompanyLiveCallsHash = \"\";\r\n  let previousCompanyWaitCallsHash = \"\";\r\n  let currentDocStatus = \"\";\r\n  let todayLiveCountHash = \"\";\r\n  let todayAnswerCountHash = \"\";\r\n\r\n  let prevUnreadCount = null;\r\n\r\n  // Handle balance fetching\r\n  ws.on(\"message\", (message) => {\r\n    const data = JSON.parse(message);\r\n\r\n    if (data.action === \"fetchUserActive\") {\r\n      id = data.id;\r\n      const fetchUserActive = (callback) => {\r\n        connection.query(\r\n          \"SELECT status FROM users WHERE id = ?\",\r\n          [id],\r\n          (err, results) => {\r\n            if (err) {\r\n              return callback(null);\r\n            }\r\n            callback(results[0] || null);\r\n          }\r\n        );\r\n      };\r\n\r\n      fetchUserActive((userData) => {\r\n        if (userData && userData.status === 0) {\r\n          ws.send(\r\n            JSON.stringify({\r\n              user_status: {\r\n                message: \"Access denied: User status is inactive.\",\r\n                is_active: false,\r\n              },\r\n            })\r\n          );\r\n        }\r\n        const fetchUserActiveInterval = setInterval(() => {\r\n          fetchUserActive((userData) => {\r\n            if (userData && userData.status === 0) {\r\n              ws.send(\r\n                JSON.stringify({\r\n                  user_status: {\r\n                    message: \"Your account has been suspended.\",\r\n                    is_active: false,\r\n                  },\r\n                })\r\n              );\r\n            }\r\n          });\r\n        }, 4000);\r\n\r\n        ws.on(\"close\", () => {\r\n          clearInterval(fetchUserActiveInterval);\r\n        });\r\n      });\r\n    }\r\n\r\n    if (data.action === \"fetchBalance\") {\r\n      userId = data.userId;\r\n\r\n      // Function to fetch balance\r\n      const fetchBalance = (callback) => {\r\n        connection.query(\r\n          \"SELECT id, company_name, email, balance FROM companies WHERE id = ?\",\r\n          [userId],\r\n          (err, results) => {\r\n            if (err) {\r\n              return callback(null);\r\n            }\r\n            callback(results[0] ? results[0].balance : null);\r\n          }\r\n        );\r\n      };\r\n\r\n      // Initial balance fetch\r\n      fetchBalance((initialBalance) => {\r\n        currentBalance = initialBalance;\r\n        ws.send(JSON.stringify({ balance: currentBalance }));\r\n\r\n        // Balance update interval\r\n        const balanceInterval = setInterval(() => {\r\n          fetchBalance((newBalance) => {\r\n            if (newBalance !== currentBalance) {\r\n              ws.send(JSON.stringify({ balance: newBalance }));\r\n              currentBalance = newBalance;\r\n            }\r\n          });\r\n        }, 2000);\r\n\r\n        // Clear the interval on WebSocket close\r\n        ws.on(\"close\", () => {\r\n          clearInterval(balanceInterval);\r\n        });\r\n      });\r\n    }\r\n\r\n    if (data.action === \"fetchResellerBalance\") {\r\n      userId = data.userId;\r\n\r\n      // Function to fetch the balance\r\n      const fetchBalance = (callback) => {\r\n        connection.query(\r\n          \"SELECT balance FROM `reseller_wallets` WHERE user_id = ?\",\r\n          [userId],\r\n          (err, results) => {\r\n            if (err) {\r\n              logger.error(\"Database query error:\", err);\r\n              callback(null);\r\n            } else {\r\n              callback(results[0] ? results[0].balance : null);\r\n            }\r\n          }\r\n        );\r\n      };\r\n\r\n      // Initial balance fetch\r\n      fetchBalance((initialBalance) => {\r\n        currentBalance = initialBalance;\r\n        ws.send(JSON.stringify({ balance: currentBalance }));\r\n\r\n        // Balance update interval\r\n        const balanceInterval = setInterval(() => {\r\n          fetchBalance((newBalance) => {\r\n            if (newBalance !== currentBalance) {\r\n              ws.send(JSON.stringify({ balance: newBalance }));\r\n              currentBalance = newBalance;\r\n            }\r\n          });\r\n        }, 2000);\r\n\r\n        // Clear the interval on WebSocket close\r\n        ws.on(\"close\", () => {\r\n          clearInterval(balanceInterval);\r\n        });\r\n      });\r\n    }\r\n\r\n    if (data.action === \"fetchCompanyLivecalls\") {\r\n      userId = data.userId;\r\n\r\n      const fetchBalance = (callback) => {\r\n        const query = `\r\n          SELECT \r\n            companies.company_name, \r\n            companies.email, \r\n            companies.id AS company_id, \r\n            countries.country_name, \r\n            caller_num, \r\n            agent_channel, \r\n            agent_name, \r\n            agent_number, \r\n            call_status, \r\n            call_type, \r\n            tfn, \r\n            destination_type, \r\n            destination, \r\n            live_calls.ip,\r\n            live_calls.created_at, \r\n            live_calls.updated_at \r\n          FROM \r\n            live_calls \r\n          LEFT JOIN \r\n            companies ON live_calls.company_id = companies.id \r\n          LEFT JOIN \r\n            countries ON live_calls.country_id = countries.id \r\n          WHERE \r\n            live_calls.call_status = 3 AND \r\n            live_calls.company_id = ?`;\r\n\r\n        connection.query(query, [userId], (err, results) => {\r\n          if (err) {\r\n            return callback(null);\r\n          }\r\n          callback(results ? results : null);\r\n        });\r\n      };\r\n\r\n      // Initial balance fetch\r\n      fetchBalance((initialBalance) => {\r\n        previousCompanyLiveCallsHash = generateHash(initialBalance);\r\n\r\n        ws.send(JSON.stringify({ initialBalance }));\r\n\r\n        // Balance update interval\r\n        const balanceInterval = setInterval(() => {\r\n          fetchBalance((livecalls) => {\r\n            ws.send(JSON.stringify({ livecalls }));\r\n            const currentHash = generateHash(livecalls);\r\n            if (previousCompanyLiveCallsHash !== currentHash) {\r\n              ws.send(JSON.stringify({ livecalls }));\r\n              previousCompanyLiveCallsHash = generateHash(currentHash);\r\n            }\r\n          });\r\n        }, 1000);\r\n\r\n        // Clear the interval on WebSocket close\r\n        ws.on(\"close\", () => {\r\n          clearInterval(balanceInterval);\r\n        });\r\n      });\r\n    }\r\n\r\n    if (data.action === \"fetchCompanyWaitingcalls\") {\r\n      userId = data.userId;\r\n\r\n      const fetchWaitBalance = (callback) => {\r\n        const query = `\r\n             SELECT companies.company_name, companies.email, countries.country_name, caller_num,agent_channel,agent_name,agent_number, call_status, call_type, tfn, destination_type, destination, live_calls.created_at, live_calls.updated_at FROM live_calls left join companies on live_calls.company_id = companies.id left join countries on live_calls.country_id = countries.id where live_calls.call_status=2 and live_calls.company_id = ?`;\r\n        connection.query(query, [userId], (err, results) => {\r\n          if (err) {\r\n            return callback([]);\r\n          }\r\n          callback(results && results.length > 0 ? results : []);\r\n        });\r\n      };\r\n\r\n      // Initial balance fetch\r\n      fetchWaitBalance((initialBalance) => {\r\n        previousCompanyWaitCallsHash = generateHash(initialBalance);\r\n\r\n        ws.send(JSON.stringify({ initialBalance }));\r\n\r\n        // Balance update interval\r\n        const balanceInterval = setInterval(() => {\r\n          fetchWaitBalance((waitcalls) => {\r\n            ws.send(JSON.stringify({ waitcalls }));\r\n            const currentHash = generateHash(waitcalls);\r\n            if (previousCompanyWaitCallsHash !== currentHash) {\r\n              ws.send(JSON.stringify({ waitcalls }));\r\n              previousCompanyWaitCallsHash = generateHash(currentHash);\r\n            }\r\n          });\r\n        }, 1000);\r\n\r\n        // Clear the interval on WebSocket close\r\n        ws.on(\"close\", () => {\r\n          clearInterval(balanceInterval);\r\n        });\r\n      });\r\n    }\r\n\r\n    if (data.action === \"fetchAllWaitingcalls\") {\r\n      const fetchWaitCalls = (callback) => {\r\n        const query = `\r\n            SELECT companies.company_name, companies.email, countries.country_name, caller_num,agent_channel,agent_name,agent_number, call_status, call_type, tfn, destination_type, destination, live_calls.created_at, live_calls.updated_at FROM live_calls\r\n            left join companies on live_calls.company_id = companies.id left join countries on live_calls.country_id = countries.id where live_calls.call_status=2`;\r\n        connection.query(query, (err, results) => {\r\n          if (err) {\r\n            return callback([]);\r\n          }\r\n          callback(results && results.length > 0 ? results : []);\r\n        });\r\n      };\r\n\r\n      // Initial balance fetch\r\n      fetchWaitCalls((initialCalls) => {\r\n        previousCompanyWaitCallsHash = generateHash(initialCalls);\r\n\r\n        ws.send(JSON.stringify({ initialCalls }));\r\n\r\n        // Balance update interval\r\n        const balanceInterval = setInterval(() => {\r\n          fetchWaitCalls((waitcalls) => {\r\n            ws.send(JSON.stringify({ waitcalls }));\r\n            const currentHash = generateHash(waitcalls);\r\n            if (previousCompanyWaitCallsHash !== currentHash) {\r\n              ws.send(JSON.stringify({ waitcalls }));\r\n              previousCompanyWaitCallsHash = generateHash(currentHash);\r\n            }\r\n          });\r\n        }, 1000);\r\n\r\n        // Clear the interval on WebSocket close\r\n        ws.on(\"close\", () => {\r\n          clearInterval(balanceInterval);\r\n        });\r\n      });\r\n    }\r\n\r\n    if (data.action === \"fetchSuperAllLivecalls\") {\r\n      const fetchBalance = (callback) => {\r\n        const query = `\r\n          SELECT \r\n            companies.company_name, \r\n            companies.email, \r\n            companies.id AS company_id, \r\n            countries.country_name, \r\n            caller_num, \r\n            agent_channel, \r\n            agent_name, \r\n            agent_number, \r\n            call_status, \r\n            call_type, \r\n            tfn, \r\n            destination_type, \r\n            destination, \r\n            live_calls.ip,\r\n            live_calls.created_at, \r\n            live_calls.updated_at \r\n          FROM \r\n            live_calls \r\n          LEFT JOIN \r\n            companies ON live_calls.company_id = companies.id \r\n          LEFT JOIN \r\n            countries ON live_calls.country_id = countries.id \r\n          WHERE \r\n            live_calls.call_status = 3`;\r\n\r\n        connection.query(query, (err, results) => {\r\n          if (err) {\r\n            return callback(null);\r\n          }\r\n          callback(results ? results : null);\r\n        });\r\n      };\r\n\r\n      // Initial balance fetch\r\n      fetchBalance((initialBalance) => {\r\n        previousCompanyLiveCallsHash = generateHash(initialBalance);\r\n\r\n        ws.send(JSON.stringify({ initialBalance }));\r\n\r\n        // Balance update interval\r\n        const balanceInterval = setInterval(() => {\r\n          fetchBalance((livecalls) => {\r\n            ws.send(JSON.stringify({ livecalls }));\r\n            const currentHash = generateHash(livecalls);\r\n            if (previousCompanyLiveCallsHash !== currentHash) {\r\n              ws.send(JSON.stringify({ livecalls }));\r\n              previousCompanyLiveCallsHash = generateHash(currentHash);\r\n            }\r\n          });\r\n        }, 1000);\r\n\r\n        // Clear the interval on WebSocket close\r\n        ws.on(\"close\", () => {\r\n          clearInterval(balanceInterval);\r\n        });\r\n      });\r\n    }\r\n\r\n    if (data.action === \"fetchNewDocs\") {\r\n      const fetchDocCount = (callback) => {\r\n        const query = `SELECT count(*) as count FROM user_documents WHERE status = 0`;\r\n        connection.query(query, (err, results) => {\r\n          if (err) {\r\n            return callback(err, null);\r\n          }\r\n          const currentCount = results[0]?.count || 0;\r\n          callback(null, currentCount);\r\n        });\r\n      };\r\n\r\n      // Initial document count fetch\r\n      fetchDocCount((err, initialCount) => {\r\n        if (err) {\r\n          return;\r\n        }\r\n\r\n        prevData = initialCount;\r\n        ws.send(JSON.stringify({ count: prevData }));\r\n\r\n        const balanceInterval = setInterval(() => {\r\n          fetchDocCount((err, newCount) => {\r\n            if (err) {\r\n              return;\r\n            }\r\n            if (newCount !== prevData && newCount > prevData) {\r\n              ws.send(JSON.stringify({ count: newCount }));\r\n              prevData = newCount;\r\n            } else if (newCount !== prevData && newCount < prevData) {\r\n              prevData = newCount;\r\n            }\r\n          });\r\n        }, 2000);\r\n        ws.on(\"close\", () => {\r\n          clearInterval(balanceInterval);\r\n        });\r\n      });\r\n    }\r\n\r\n    if (data.action === \"fetchResellerBalance\") {\r\n      userId = data.userId;\r\n\r\n      // Function to fetch the balance\r\n      const fetchBalance = (callback) => {\r\n        connection.query(\r\n          \"SELECT balance FROM `reseller_wallets` WHERE user_id = ?\",\r\n          [userId],\r\n          (err, results) => {\r\n            if (err) {\r\n              logger.error(\"Database query error:\", err);\r\n              callback(null);\r\n            } else {\r\n              callback(results[0] ? results[0].balance : null);\r\n            }\r\n          }\r\n        );\r\n      };\r\n\r\n      // Initial document\r\n      fetchBalance((initialBalance) => {\r\n        currentBalance = initialBalance;\r\n        ws.send(JSON.stringify({ balance: currentBalance }));\r\n\r\n        // Balance update interval\r\n        const balanceInterval = setInterval(() => {\r\n          fetchBalance((newBalance) => {\r\n            if (newBalance !== currentBalance) {\r\n              ws.send(JSON.stringify({ balance: newBalance }));\r\n              currentBalance = newBalance;\r\n            }\r\n          });\r\n        }, 2000);\r\n\r\n        // Clear the interval on WebSocket close\r\n        ws.on(\"close\", () => {\r\n          clearInterval(balanceInterval);\r\n        });\r\n      });\r\n    }\r\n\r\n    if (data.action === \"fetchDocStatus\") {\r\n      userId = data.userId;\r\n\r\n      // Function to fetch company doc status\r\n      const fetchDocStatus = (callback) => {\r\n        connection.query(\r\n          `SELECT CASE WHEN is_verified_doc = 0 THEN 0 WHEN is_verified_doc = 1 THEN 1 WHEN is_verified_doc = 2 THEN 2 WHEN is_verified_doc = 3 THEN 3 ELSE 'Unknown status' END AS status_message\r\n          FROM users\r\n          WHERE company_id = ?`,\r\n          [userId],\r\n          (err, results) => {\r\n            if (err) {\r\n              return callback(null);\r\n            }\r\n            callback(results[0] ? results[0].status_message : null);\r\n          }\r\n        );\r\n      };\r\n\r\n      fetchDocStatus((initStatus) => {\r\n        currentDocStatus = initStatus;\r\n        ws.send(JSON.stringify({ status: currentDocStatus }));\r\n\r\n        const fetchDocStatusInterval = setInterval(() => {\r\n          fetchDocStatus((newStatus) => {\r\n            if (newStatus !== currentDocStatus) {\r\n              ws.send(JSON.stringify({ status: newStatus }));\r\n              currentDocStatus = newStatus;\r\n            }\r\n          });\r\n        }, 2000);\r\n\r\n        ws.on(\"close\", () => {\r\n          clearInterval(fetchDocStatusInterval);\r\n        });\r\n      });\r\n    }\r\n\r\n    if (data.action === \"GET_CALLS_COUNT_FOR_SUPERADMIN\") {\r\n      const GET_CALLS_COUNT_FOR_SUPERADMIN = (callback) => {\r\n        const query = `SELECT COUNT(CASE WHEN DATE(call_start_time) = CURDATE() - INTERVAL 1 DAY THEN 1 END) AS prev_count,COUNT(CASE WHEN DATE(call_start_time) = CURDATE() THEN 1 END) AS today_count FROM cdrs;`;\r\n        connection.query(query, (err, results) => {\r\n          if (err) {\r\n            return callback(null);\r\n          }\r\n          callback(results ? results[0] : null);\r\n        });\r\n      };\r\n      GET_CALLS_COUNT_FOR_SUPERADMIN((initCount) => {\r\n        todayLiveCountHash = initCount?.today_count;\r\n        ws.send(JSON.stringify({ initCount }));\r\n        const SUPERADMIN_CALLS_COUNT_INTERVAL = setInterval(() => {\r\n          GET_CALLS_COUNT_FOR_SUPERADMIN((initCount) => {\r\n            const currentHash = initCount?.today_count;\r\n            if (todayLiveCountHash !== currentHash) {\r\n              todayLiveCountHash = currentHash;\r\n              ws.send(JSON.stringify({ initCount }));\r\n            }\r\n          });\r\n        }, 1000);\r\n\r\n        ws.on(\"close\", () => {\r\n          clearInterval(SUPERADMIN_CALLS_COUNT_INTERVAL);\r\n        });\r\n      });\r\n    }\r\n\r\n    if (data.action === \"GET_ANSWER_CALLS_COUNT_FOR_SUPERADMIN\") {\r\n      const GET_ANSWER_CALLS_COUNT_FOR_SUPERADMIN = (callback) => {\r\n        const query = `SELECT COUNT(CASE WHEN DATE(call_start_time) = CURDATE() - INTERVAL 1 DAY THEN 1 END) AS prev_count,COUNT(CASE WHEN DATE(call_start_time) = CURDATE() THEN 1 END) AS today_count FROM cdrs WHERE disposition = 'ANSWER' ;`;\r\n        connection.query(query, (err, results) => {\r\n          if (err) {\r\n            return callback(null);\r\n          }\r\n          callback(results ? results[0] : null);\r\n        });\r\n      };\r\n      GET_ANSWER_CALLS_COUNT_FOR_SUPERADMIN((initAnsCount) => {\r\n        todayAnswerCountHash = initAnsCount?.today_count;\r\n        ws.send(JSON.stringify({ initAnsCount }));\r\n        const SUPERADMIN_CALLS_ANS_COUNT_INTERVAL = setInterval(() => {\r\n          GET_ANSWER_CALLS_COUNT_FOR_SUPERADMIN((initAnsCount) => {\r\n            const currentHash = initAnsCount?.today_count;\r\n            if (todayAnswerCountHash !== currentHash) {\r\n              todayAnswerCountHash = currentHash;\r\n              ws.send(JSON.stringify({ initAnsCount }));\r\n            }\r\n          });\r\n        }, 1000);\r\n\r\n        ws.on(\"close\", () => {\r\n          clearInterval(SUPERADMIN_CALLS_ANS_COUNT_INTERVAL);\r\n        });\r\n      });\r\n    }\r\n\r\n    if (data.action === \"GET_CALLS_COUNT_FOR_COMPANY\") {\r\n      userId = data.userId;\r\n\r\n      const GET_CALLS_COUNT_FOR_COMPANY = (callback) => {\r\n        const query = `SELECT COUNT(CASE WHEN DATE(call_start_time) = CURDATE() - INTERVAL 1 DAY THEN 1 END) AS prev_count,COUNT(CASE WHEN DATE(call_start_time) = CURDATE() THEN 1 END) AS today_count FROM cdrs WHERE company_id = ?;`;\r\n        connection.query(query, [userId], (err, results) => {\r\n          if (err) {\r\n            return callback(null);\r\n          }\r\n          callback(results ? results[0] : null);\r\n        });\r\n      };\r\n      GET_CALLS_COUNT_FOR_COMPANY((initCount) => {\r\n        todayLiveCountHash = initCount?.today_count;\r\n        ws.send(JSON.stringify({ initCount }));\r\n        const COMPANY_CALLS_COUNT_INTERVAL = setInterval(() => {\r\n          GET_CALLS_COUNT_FOR_COMPANY((initCount) => {\r\n            const currentHash = initCount?.today_count;\r\n            if (todayLiveCountHash !== currentHash) {\r\n              todayLiveCountHash = currentHash;\r\n              ws.send(JSON.stringify({ initCount }));\r\n            }\r\n          });\r\n        }, 1000);\r\n\r\n        ws.on(\"close\", () => {\r\n          clearInterval(COMPANY_CALLS_COUNT_INTERVAL);\r\n        });\r\n      });\r\n    }\r\n\r\n    if (data.action === \"GET_ANSWER_CALLS_COUNT_FOR_COMPANY\") {\r\n      userId = data.userId;\r\n\r\n      const GET_ANSWER_CALLS_COUNT_FOR_COMPANY = (callback) => {\r\n        const query = `SELECT COUNT(CASE WHEN DATE(call_start_time) = CURDATE() - INTERVAL 1 DAY THEN 1 END) AS prev_count, COUNT(CASE WHEN DATE(call_start_time) = CURDATE() THEN 1 END) AS today_count FROM cdrs WHERE disposition = 'ANSWER' AND company_id = ?;`;\r\n        connection.query(query, [userId], (err, results) => {\r\n          if (err) {\r\n            return callback(null);\r\n          }\r\n          callback(results ? results[0] : null);\r\n        });\r\n      };\r\n      GET_ANSWER_CALLS_COUNT_FOR_COMPANY((initAnsCount) => {\r\n        todayAnswerCountHash = initAnsCount?.today_count;\r\n        ws.send(JSON.stringify({ initAnsCount }));\r\n        const COMPANY_CALLS_ANS_COUNT_INTERVAL = setInterval(() => {\r\n          GET_ANSWER_CALLS_COUNT_FOR_COMPANY((initAnsCount) => {\r\n            const currentHash = initAnsCount?.today_count;\r\n            if (todayAnswerCountHash !== currentHash) {\r\n              todayAnswerCountHash = currentHash;\r\n              ws.send(JSON.stringify({ initAnsCount }));\r\n            }\r\n          });\r\n        }, 1000);\r\n\r\n        ws.on(\"close\", () => {\r\n          clearInterval(COMPANY_CALLS_ANS_COUNT_INTERVAL);\r\n        });\r\n      });\r\n    }\r\n\r\n    if (data.action === \"GET_NOTIFICATION\") {\r\n      id = data?.user_data?.user_id;\r\n      user_type = data?.user_data?.user_type;\r\n\r\n      const superadmin_query = `\r\n      SELECT \r\n          (SELECT COUNT(*) \r\n           FROM notification_recipients \r\n           WHERE is_read = 0 \r\n           AND user_type = ?) AS notification_recipients_count,\r\n          JSON_ARRAYAGG(JSON_OBJECT(\r\n              'id', limited_n.notification_id,\r\n              'notification_recipient_id', limited_n.notification_recipient_id,\r\n              'subject', limited_n.subject,\r\n              'message', limited_n.message,\r\n              'type', limited_n.type,\r\n              'created_at', limited_n.created_at\r\n          )) AS data\r\n      FROM (\r\n          SELECT \r\n              n.id AS notification_id, \r\n              nr.id AS notification_recipient_id,\r\n              n.subject, \r\n              n.message, \r\n              n.type, \r\n              n.created_at\r\n          FROM \r\n              notification_recipients nr\r\n          INNER JOIN \r\n              notifications n \r\n              ON nr.notification_id = n.id\r\n          WHERE \r\n              nr.is_read = 0 \r\n              AND nr.user_type = ?\r\n          ORDER BY \r\n              n.created_at DESC\r\n          LIMIT 10\r\n      ) AS limited_n;\r\n    `;\r\n\r\n      const user_query = `\r\n  SELECT \r\n      (SELECT COUNT(*) \r\n       FROM notification_recipients \r\n       WHERE is_read = 0 \r\n       AND user_id = ?) AS notification_recipients_count,\r\n      JSON_ARRAYAGG(JSON_OBJECT(\r\n          'id', limited_n.notification_id,\r\n          'notification_recipient_id', limited_n.notification_recipient_id,\r\n          'subject', limited_n.subject,\r\n          'message', limited_n.message,\r\n          'type', limited_n.type,\r\n           'created_at', limited_n.created_at\r\n      )) AS data\r\n  FROM (\r\n      SELECT \r\n          n.id AS notification_id, \r\n          nr.id AS notification_recipient_id,\r\n          n.subject, \r\n          n.message, \r\n          n.type,\r\n           n.created_at\r\n      FROM \r\n          notification_recipients nr\r\n      INNER JOIN \r\n          notifications n \r\n          ON nr.notification_id = n.id\r\n      WHERE \r\n          nr.is_read = 0 \r\n          AND nr.user_id = ?\r\n      ORDER BY \r\n          n.created_at DESC\r\n      LIMIT 10\r\n  ) AS limited_n;\r\n`;\r\n\r\n      const GET_NOTIFICATION = ({ id, user_type }, callback) => {\r\n        if ([\"super-admin\", \"noc\", \"support\"].includes(user_type)) {\r\n          connection.query(\r\n            superadmin_query,\r\n            [user_type, user_type],\r\n            (err, results) => {\r\n              if (err) {\r\n                return callback(null);\r\n              }\r\n              prevUnreadCount = results[0]?.notification_recipients_count;\r\n              // ws.send(\r\n              //   JSON.stringify({\r\n              //     getNotification: {\r\n              //       data: JSON.parse(results[0].data),\r\n              //       unread_counts: results[0]?.notification_recipients_count,\r\n              //     },\r\n              //   })\r\n              // );\r\n              callback(results || null);\r\n            }\r\n          );\r\n        } else {\r\n          connection.query(user_query, [id, id], (err, results) => {\r\n            if (err) {\r\n              return callback(null);\r\n            }\r\n            callback(results || null);\r\n          });\r\n        }\r\n      };\r\n\r\n      setInterval(() => {\r\n        GET_NOTIFICATION({ id, user_type }, (newNotification) => {\r\n          if (Array.isArray(newNotification) && newNotification.length > 0) {\r\n            const unreadCount =\r\n              newNotification[0]?.notification_recipients_count;\r\n            const data = JSON.parse(newNotification[0].data);\r\n\r\n            if (\r\n              unreadCount !== prevUnreadCount ||\r\n              JSON.stringify(data) !== JSON.stringify(prevData)\r\n            ) {\r\n              prevUnreadCount = unreadCount;\r\n              prevData = data;\r\n\r\n              ws.send(\r\n                JSON.stringify({\r\n                  getNotification: {\r\n                    data: data,\r\n                    unread_counts: unreadCount,\r\n                  },\r\n                })\r\n              );\r\n            }\r\n          }\r\n        });\r\n      }, 2000);\r\n\r\n      // setInterval(() => {\r\n      //   GET_NOTIFICATION({ id, user_type }, (newNotification) => {\r\n      //     if (\r\n      //       Array.isArray(newNotification) &&\r\n      //       newNotification.length > 0 &&\r\n      //       newNotification[0]?.notification_recipients_count !==\r\n      //         prevUnreadCount\r\n      //     ) {\r\n      //       prevUnreadCount = newNotification[0]?.notification_recipients_count;\r\n      //       ws.send(\r\n      //         JSON.stringify({\r\n      //           getNotification: {\r\n      //             data: JSON.parse(newNotification[0].data),\r\n      //             unread_counts:\r\n      //               newNotification[0]?.notification_recipients_count,\r\n      //           },\r\n      //         })\r\n      //       );\r\n      //     }\r\n      //   });\r\n      // }, 2000);\r\n    }\r\n  });\r\n});\r\n\r\n// Start server on port 8003\r\nserver.listen(8003, () => {\r\n  logger.info(\"Server is listening on port 8003\");\r\n});\r\n"],"mappings":"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","ignoreList":[]}